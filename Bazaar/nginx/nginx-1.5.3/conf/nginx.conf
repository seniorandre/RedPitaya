
user  root;
worker_processes  1;

error_log  /var/log/nginx/error.log;
error_log  /var/log/nginx/debug.log  info;

pid        /var/run/nginx.pid;

daemon on;

events {
    worker_connections  1024;
}

# worker_rlimit_core 500M;

http {
    include       mime.types;
    default_type  application/octet-stream;

    init_by_lua 'cjson = require "cjson"';
    lua_shared_dict rp_params 10m;

    access_log /dev/null;
    error_log  /var/log/nginx/error.log;
    error_log  /var/log/nginx/debug.log  info;

    server {
        listen       80;

        keepalive_timeout 0;

        access_log /dev/null;
        error_log  /var/log/nginx/error.log;
        error_log  /var/log/nginx/debug.log  info;

        #gzip on;
        #gzip_http_version 1.0;
        #gzip_vary on;
        #gzip_comp_level 6;
        #gzip_proxied any;
        #gzip_types application/json;
        #gzip_buffers 16 8k; 
        #gzip_buffers 128 4k;
        #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        root /opt/www/apps;
      
        location ~ ^/tmp {
            root /;
        }

        location ~ ^/log {
      	    root /var/;
      	}

        location ~ \.css {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/css;
            add_header  Content-Type    text/css;
        }

        location ~ \.js {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/x-javascript;
            add_header  Content-Type    application/x-javascript;
        }

        client_body_buffer_size 1M;
        rp_bazaar_dir     /opt/www/apps;
        rp_bazaar_server  http://bazaar.redpitaya.com;
        rp_tmp_dir        /tmp;

        location /bazaar {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        
                 rp_module_cmd;
        }

        location /data {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        
                 rp_module_cmd;
        }

        location /upload_gen_ch1 {
             add_header 'Access-Control-Allow-Origin' '*';
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             add_header 'Content-type' 'text/plain; charset=utf-8';

             content_by_lua '
                if ngx.req.get_method() == "POST" then
                   local file = io.open("/tmp/gen_ch1.csv", "w");
                   ngx.req.read_body();
                   io.output(file):write(ngx.var.request_body);
                   io.flush(file);
                   io.close(file);
                   ngx.say("OK");
                else
                   ngx.say("ERROR: Unsupported request method");
                end
             ';
        }

        location /upload_gen_ch2 {
             add_header 'Access-Control-Allow-Origin' '*';
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             add_header 'Content-type' 'text/plain; charset=utf-8';      

             content_by_lua '
                if ngx.req.get_method() == "POST" then
                   local file = io.open("/tmp/gen_ch2.csv", "w");
                   ngx.req.read_body();
                   io.output(file):write(ngx.var.request_body);
                   io.flush(file);
                   io.close(file);
                   ngx.say("OK");
                else
                   ngx.say("ERROR: Unsupported request method");
                end
             ';
        }

        location /redpitaya {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        
            default_type application/json;
            content_by_lua '
                data1 = {}
                for i=1, 65536 do
            data1[i] = 0.111 * i
                end
                res = ngx.location.capture("/hello");
                ngx.log(ngx.ERR, res.truncated)
                json_text = cjson.encode(data1)
                ngx.say(json_text)
            ';
        }

        location /redpitaya/action {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '
                data = {}
                data.status = 1
                json_text = cjson.encode(data)
                ngx.say(json_text)
            ';
        }

        location /redpitaya/data {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '

                local rp_params = ngx.shared.rp_params;
                if not rp_params:get("Floats") then
                    rp_params:set("Floats", "[-1000000, 1000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
                end
                
                params = cjson.decode(rp_params:get("Floats"));

                datasets = {};
                datasets.g1 = {{}, {}};
                datasets.params = params;

                datasets.g1[1].data = {};
                datasets.g1[2].data = {};

                math.randomseed(os.time());
                for i=1, 2048 do
                    datasets.g1[1].data[i] = {};
                    datasets.g1[2].data[i] = {};
                    datasets.g1[1].data[i][1] = i;
                    datasets.g1[2].data[i][1] = i;
                    datasets.g1[1].data[i][2] = math.random(9000, 10000)/1000.0*math.sin(10.0/2048*i + 0.5);
                    datasets.g1[2].data[i][2] = math.random(4500, 5500)/1000.0*math.sin(10.0/2048*i - 1);
                end;
                result = {};
                result.datasets = datasets;
                json_text = cjson.encode(result);

                if ngx.req.get_method() == "GET" then    
                    ngx.say(json_text);
                elseif ngx.req.get_method() == "POST" then
                    ngx.req.read_body();
                    body_table = cjson.decode(ngx.var.request_body);
                    if body_table and body_table.datasets and body_table.datasets.params then
                        rp_params:set("Floats", cjson.encode(body_table.datasets.params));
                        datasets.params = body_table.datasets.params;
                        ngx.say(cjson.encode(body_table));
                    else
                        ngx.say(cjson.encode({"ERROR - wrong POST format"}));
                    end;
                else
                    ngx.say(cjson.encode({"ERROR"}));
                end;
            ';
        }

        location /redpitaya/data/decimated {
            add_header 'Access-Control-Allow-Or igin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;
            content_by_lua '

                local client_resolution = 1024

                local res = ngx.location.capture("/redpitaya/data");
                body_table = cjson.decode(res.body);
                params = body_table.datasets.params;
                if params[11] and params[12] and params[11] > 0 and params[12] > 0 then
                    local ch1 = body_table.datasets.g1[1].data;
                    local ch2 = body_table.datasets.g1[2].data;
                    
                    local i=1;
                    while i <= #ch1 do
                        if params[11] < ch1[i][1] and params[12] > ch1[i][1] then
                            i = i + 1
                        else
                            table.remove(ch1, i); 
                            table.remove(ch2, i);       
                        end
                    end    

                    local m = math.floor(#ch1 / client_resolution + 0.5)

                    i=1;
                    local j = m;
                    while i <= #ch1 do
                        if j == m then
                            i = i + 1;
                        else
                            table.remove(ch1, i); 
                            table.remove(ch2, i);       
                        end
                        j = j - 1;
                        if j == 0 then j = m end
                    end

                    ngx.say(cjson.encode(body_table));
                else
                    ngx.say(cjson.encode(body_table));
                end;

            ';
        }
    }
}
